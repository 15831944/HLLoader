// ByteIterator.cpp: implementation of the CByteIterator class.
//
//////////////////////////////////////////////////////////////////////

#include "ByteIterator.h"
#include <windows.h>

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CByteIterator::CByteIterator(char* data, int length)
{
	this->ByteData = data;
	this->ByteLength = length;
	this->BytePosition = 0;
}

CByteIterator::~CByteIterator()
{
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
bool CByteIterator::Next(int size, int count)
{
	bool res = true;

	for (int i =0; i < count; i++)
	{
		if (!Next(size))
			res = false;
	}

	return res;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
bool CByteIterator::Next(int size)
{
	bool res = false;

	if ((this->BytePosition + size) <= this->ByteLength)
	{
		this->ByteData += size;
		this->ByteLength += size;
		res = true;
	}

	return res;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CByteIterator::GetFloat(float* in)
{
	GetFloat(in, 1);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CByteIterator::GetFloat(float* in, int count)
{
	if ((this->BytePosition + (int)(sizeof(float)*count)) <= this->ByteLength)
	{
		memcpy(in, this->ByteData + this->BytePosition, (sizeof(float)*count));
		Next(sizeof(float), count);
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CByteIterator::GetInteger(int* in)
{
	GetInteger(in, 1);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CByteIterator::GetInteger(int* in, int count)
{
	if ((this->BytePosition + (int)(sizeof(int)*count)) <= this->ByteLength)
	{
		memcpy(in, this->ByteData + this->BytePosition, (sizeof(int)*count));
		Next(sizeof(int), count);
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CByteIterator::GetByte(byte* in)
{
	GetByte(in, 1);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CByteIterator::GetByte(byte* in, int count)
{
	if ((this->BytePosition + (int)(sizeof(byte)*count)) <= this->ByteLength)
	{
		memcpy(in, this->ByteData + this->BytePosition, (sizeof(byte)*count));
		Next(sizeof(byte), count);
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CByteIterator::GetWord(word* in)
{
	GetWord(in, 1);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CByteIterator::GetWord(word* in, int count)
{
	if ((this->BytePosition + (int)(sizeof(word)*count)) <= this->ByteLength)
	{
		memcpy(in, this->ByteData + this->BytePosition, (sizeof(word)*count));
		Next(sizeof(word), count);
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CByteIterator::GetCharacter(char* in)
{
	GetCharacter(in, 1);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CByteIterator::GetCharacter(char* in, int count)
{
	if ((this->BytePosition + (int)(sizeof(char)*count)) <= this->ByteLength)
	{
		memcpy(in, this->ByteData + this->BytePosition, (sizeof(char)*count));
		Next(sizeof(char), count);
	}
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CByteIterator::GetBoolean(bool* in)
{
	GetBoolean(in, 1);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CByteIterator::GetBoolean(bool* in, int count)
{
	if ((this->BytePosition + (int)(sizeof(byte)*count)) <= this->ByteLength)
	{
		memcpy(in, this->ByteData + this->BytePosition, (sizeof(byte)*count));
		Next(sizeof(byte), count);
	}
}
